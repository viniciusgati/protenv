require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/instalacaos", type: :request do
  let(:current_user) { FactoryBot.create(:user) }
  before do
    sign_in current_user
  end
  
  # This should return the minimal set of attributes required to create a valid
  # Instalacao. As you add validations to Instalacao, be sure to
  # adjust the attributes here as well.
  let(:app_bin) { FactoryBot.create(:binario, tipo: :appserver) }
  let(:db_bin)  { FactoryBot.create(:binario, :dbaccess) }
  let(:banco)   { FactoryBot.create(:banco) }

  let(:valid_attributes) {
    {
      name: "Inst A",
      appserver_binario_id: app_bin.id,
      dbaccess_binario_id: db_bin.id,
      banco_id: banco.id,
      user: current_user
    }
  }

  let(:invalid_attributes) {
    { name: "", appserver_binario_id: nil, dbaccess_binario_id: nil, banco_id: nil }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Instalacao.create! valid_attributes
      get instalacaos_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      instalacao = Instalacao.create! valid_attributes
      get instalacao_url(instalacao)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_instalacao_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      instalacao = Instalacao.create! valid_attributes
      get edit_instalacao_url(instalacao)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Instalacao" do
        expect {
          post instalacaos_url, params: { instalacao: valid_attributes }
        }.to change(Instalacao, :count).by(1)
      end

      it "redirects to the created instalacao" do
        post instalacaos_url, params: { instalacao: valid_attributes }
        expect(response).to redirect_to(instalacao_url(Instalacao.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Instalacao" do
        expect {
          post instalacaos_url, params: { instalacao: invalid_attributes }
        }.to change(Instalacao, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post instalacaos_url, params: { instalacao: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "Inst B", appserver_binario_id: app_bin.id, dbaccess_binario_id: db_bin.id, banco_id: banco.id }
      }

      it "updates the requested instalacao" do
        instalacao = Instalacao.create! valid_attributes
        patch instalacao_url(instalacao), params: { instalacao: new_attributes }
        instalacao.reload
        expect(instalacao.name).to eq("Inst B")
      end

      it "redirects to the instalacao" do
        instalacao = Instalacao.create! valid_attributes
        patch instalacao_url(instalacao), params: { instalacao: new_attributes }
        instalacao.reload
        expect(response).to redirect_to(instalacao_url(instalacao))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        instalacao = Instalacao.create! valid_attributes
        patch instalacao_url(instalacao), params: { instalacao: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested instalacao" do
      instalacao = Instalacao.create! valid_attributes
      expect {
        delete instalacao_url(instalacao)
      }.to change(Instalacao, :count).by(-1)
    end

    it "redirects to the instalacaos list" do
      instalacao = Instalacao.create! valid_attributes
      delete instalacao_url(instalacao)
      expect(response).to redirect_to(instalacaos_url)
    end
  end
end
