require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/binarios", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Binario. As you add validations to Binario, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "CLI",
      tipo: :appserver,
      download_url: "https://example.com/cli.tar.gz",
      auth_username: "user",
      auth_password: "pass"
    }
  }

  let(:invalid_attributes) {
    { name: "", tipo: nil, download_url: "ftp://invalid", auth_username: "", auth_password: "" }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Binario.create! valid_attributes
      get binarios_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      binario = Binario.create! valid_attributes
      get binario_url(binario)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_binario_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      binario = Binario.create! valid_attributes
      get edit_binario_url(binario)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Binario" do
        expect {
          post binarios_url, params: { binario: valid_attributes }
        }.to change(Binario, :count).by(1)
      end

      it "redirects to the created binario" do
        post binarios_url, params: { binario: valid_attributes }
        expect(response).to redirect_to(binario_url(Binario.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Binario" do
        expect {
          post binarios_url, params: { binario: invalid_attributes }
        }.to change(Binario, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post binarios_url, params: { binario: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "NewName", tipo: :dbaccess, download_url: "https://example.com/new.bin", auth_username: "u2", auth_password: "p2" }
      }

      it "updates the requested binario" do
        binario = Binario.create! valid_attributes
        patch binario_url(binario), params: { binario: new_attributes }
        binario.reload
        expect(binario.name).to eq("NewName")
        expect(binario.tipo).to eq("dbaccess")
      end

      it "redirects to the binario" do
        binario = Binario.create! valid_attributes
        patch binario_url(binario), params: { binario: new_attributes }
        binario.reload
        expect(response).to redirect_to(binario_url(binario))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        binario = Binario.create! valid_attributes
        patch binario_url(binario), params: { binario: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested binario" do
      binario = Binario.create! valid_attributes
      expect {
        delete binario_url(binario)
      }.to change(Binario, :count).by(-1)
    end

    it "redirects to the binarios list" do
      binario = Binario.create! valid_attributes
      delete binario_url(binario)
      expect(response).to redirect_to(binarios_url)
    end
  end
end
